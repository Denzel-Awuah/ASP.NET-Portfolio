import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { fetchCount } from './projectAPI';

const initialState = {
  dataId: "",
  sectiondataId: "",
  leftArrowHref: "",
  rightArrowHref: "",
  title: "",
  img: "",
  description: [],
  nextPage: 0,
  status: "idle",
};


// const initialState = { 
//   project: [
//     {
//      username: "test",
//      id: 1,
//      title: "Eat",
//      completed: true
//     },
//     {
//      username: "test",
//      id: 2,
//      title: "Code",
//      completed: false
//     },
//     {
//      username: "test",
//      id: 3,
//      title: "Sleep",
//      completed: false
//     }
//    ]
//   };


// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(nextProjectPage(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const nextProjectPage = createAsyncThunk(
  'project/fetchCount',
  async (page) => {  //send action
    const response = await fetchCount(page);  //send action
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);






export const projectSlice = createSlice({
  name: "project",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    reactThesarus: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn"t actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes

      //reset the decription points
      state.description = [];
       
      state.dataId = "reactapp";
      state.title = "React Word-Processor App";
      
      state.sectiondataId = "angularSite";

      state.leftArrowHref = "#java";
      state.rightArrowHref = "#angularSite";
      state.img = "img/wordApp.jpg";

      //Description
      state.description.push(<li>the first bullet point</li>);
      state.description.push(<li>the second bullet point</li>);
      state.description.push(<li>the last bullet point</li>);
      console.log(state.description);

    },
    angularSite: (state) => {
      
      state.dataId = "angularSite";
      state.title = "Soccer Statistics Website";
      state.sectiondataId = "reactapp";
      state.leftArrowHref = "#reactapp";
      state.rightArrowHref = "#denzelawuah-portfolio";
      state.img = "img/home1.jpg";
 
    },    
    denzelawuahWebsite: (state) => {
      state.dataId = "denzelawuah-portfolio";
      state.title = "Portfolio Website";
      // state.sectiondataId = "denzelawuah-portfolio";
      state.leftArrowHref = "#angularSite";
      state.rightArrowHref = "#crm";
      state.img = "img/hackdenzel2.jpg";

    },
    crmWebsite: (state) => {
      state.dataId = "crm";
      state.title = "CRM Website for Trent Community Research Center";
      // state.sectiondataId = "crm";
      state.leftArrowHref = "#denzelawuah-portfolio";
      state.rightArrowHref = "#java";
      state.img = "img/crm2.jpg";

    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    java: (state) => {
      state.dataId = "java";
      state.title = "Chat Application";
      // state.sectiondataId = "java";
      state.leftArrowHref = "#crm";
      state.rightArrowHref = "#reactapp";
      state.img = "img/chat3.jpg";
    },
    
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
    .addCase(nextProjectPage.pending, (state, action) => {
      state.status = 'loading';
      
      state.nextPage = action.payload;

      switch (state.nextPage) {
        case 1:
          state.dataId = "reactapp";
          state.sectiondataId = "angularSite";
          break;   
          
          case 2:
            state.dataId = "reactapp"; 
            state.sectiondataId = "angularSite";
          break;    
    
          case 3:
            state.dataId = "denzelawuah-portfolio";
          break;
  
          case 4:
            state.dataId = "crm";
          break;
  
          case 5:
            state.dataId = "java";
          break;
      
        default:
          break;
      }
      
    })
    .addCase(nextProjectPage.fulfilled, (state, action) => {

    
    // add switch statement to check which action reducer to run 
    const page = action.payload;
    switch (page) {
      case 1:
        state.dataId = "reactapp";
        state.title = "React Word-Processor App";
        // state.sectiondataId = "reactapp";
        state.leftArrowHref = "#java";
        state.rightArrowHref = "#angularSite";
        state.img = "img/wordApp.jpg";
        break;   
        
        case 2:
          state.dataId = "angularSite"; 
        state.title = "Soccer Statistics Website";
        // state.sectiondataId = "angularSite";
        state.leftArrowHref = "#reactapp";
        state.rightArrowHref = "#denzelawuah-portfolio";
        state.img = "img/home1.jpg";
        break;    
        
        case 3:
          state.dataId = "denzelawuah-portfolio";
          state.title = "Portfolio Website";
          // state.sectiondataId = "denzelawuah-portfolio";
          state.leftArrowHref = "#angularSite";
          state.rightArrowHref = "#crm";    
          state.img = "img/hackdenzel2.jpg";
        break;

        case 4:
          state.dataId = "crm";
          state.title = "CRM Website for Trent Community Research Center";
          // state.sectiondataId = "crm";
          state.leftArrowHref = "#denzelawuah-portfolio";
          state.rightArrowHref = "#java";
          state.img = "img/crm2.jpg";
        break;


        case 5:
          state.dataId = "java";
          state.title = "Chat Application";
          // state.sectiondataId = "java";
          state.leftArrowHref = "#crm";
          state.rightArrowHref = "#reactapp";
          state.img = "img/chat3.jpg";
        break;
    
      default:
        break;
    }

    //make switch cases for each project page 

      
    });
  },
});

export const { reactThesarus, angularSite, denzelawuahWebsite, crmWebsite, java } = projectSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they"re used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.project.value)`
export const selectState = (state) => state.project;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here"s an example of conditionally dispatching actions based on current state.

export default projectSlice.reducer;
